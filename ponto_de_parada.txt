Ponto de Parada - Macro de Rotação de Skills para Throne and Liberty

Plano Prioritário (Concluído):
1. Configuração do ambiente:
   a. [Concluído] Python instalado (versão 3.7 ou superior)
   b. [Concluído] Bibliotecas necessárias instaladas (PySimpleGUI, keyboard)

2. Desenvolvimento do script principal:
   a. [Concluído] Criada uma classe SkillRotationMacro para gerenciar o macro
   b. [Concluído] Implementada a funcionalidade de ativação/desativação do macro
   c. [Concluído] Criada uma lista de habilidades com suas respectivas teclas e tempos de recarga
   d. [Concluído] Implementada a lógica de rotação de habilidades

3. Implementar funcionalidades adicionais:
   a. [Concluído] Criado um arquivo de configuração externo (config.json) para facilitar a customização de teclas e tempos de recarga
   b. [Concluído] Adicionado um modo de gravação para que o usuário possa criar suas próprias sequências de habilidades
   c. [Concluído] Implementado um sistema de perfis para diferentes classes ou jogos
   d. [Concluído] Adicionada uma interface gráfica para facilitar a configuração e uso do macro

4. Testes e otimização:
   a. [Concluído] Criado um script de teste (test_macro.py) para testar diferentes configurações
   b. [Concluído] Otimizado o desempenho para garantir que não haja atrasos perceptíveis

5. Documentação:
   a. [Concluído] Atualizado o README com instruções de instalação e uso da interface gráfica
   b. [Concluído] Adicionados comentários explicativos ao código para facilitar futuras modificações

Próximos passos:
1. Realizar testes extensivos da interface gráfica e do macro em diferentes ambientes
2. Criar um arquivo de configuração padrão (config.json) com um perfil de exemplo
3. Implementar tratamento de erros adicional e melhorar a experiência do usuário
4. Considerar a adição de recursos avançados:
   a. Suporte a combinações de teclas (ex: Shift + 1)
   b. Opção para adicionar atrasos aleatórios entre as ações para simular comportamento humano
   c. Integração com reconhecimento de imagem para detecção automática de cooldowns
5. Criar um instalador para facilitar a distribuição do programa
6. Implementar um sistema de atualizações automáticas
7. Adicionar suporte para múltiplos idiomas na interface gráfica
